[{"name":"net.devh.boot.grpc.examples.lib.ActiveStateRequest","comment":"Protobuf type {@code net.devh.boot.grpc.example.ActiveStateRequest}","methods":[{"name":"getId","signature":"getId()","comment":"<pre> movie id. <\/pre>  <code>int32 id = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.ActiveStateRequest$Builder","comment":"Protobuf type {@code net.devh.boot.grpc.example.ActiveStateRequest}","methods":[{"name":"getId","signature":"getId()","comment":"<pre> movie id. <\/pre>  <code>int32 id = 1;<\/code>"},{"name":"setId","signature":"setId(int)","comment":"<pre> movie id. <\/pre>  <code>int32 id = 1;<\/code>"},{"name":"clearId","signature":"clearId()","comment":"<pre> movie id. <\/pre>  <code>int32 id = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.ActiveStateRequestOrBuilder","methods":[{"name":"getId","signature":"getId()","comment":"<pre> movie id. <\/pre>  <code>int32 id = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.ActiveStateResponse","comment":"Protobuf type {@code net.devh.boot.grpc.example.ActiveStateResponse}","methods":[{"name":"getActive","signature":"getActive()","comment":"<pre> movie-service sẽ trả về trạng thái của movie này. Nếu là true, có nghĩa là vẫn có thể tạo showtime cho movie này. <\/pre>  <code>bool active = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.ActiveStateResponse$Builder","comment":"Protobuf type {@code net.devh.boot.grpc.example.ActiveStateResponse}","methods":[{"name":"getActive","signature":"getActive()","comment":"<pre> movie-service sẽ trả về trạng thái của movie này. Nếu là true, có nghĩa là vẫn có thể tạo showtime cho movie này. <\/pre>  <code>bool active = 1;<\/code>"},{"name":"setActive","signature":"setActive(boolean)","comment":"<pre> movie-service sẽ trả về trạng thái của movie này. Nếu là true, có nghĩa là vẫn có thể tạo showtime cho movie này. <\/pre>  <code>bool active = 1;<\/code>"},{"name":"clearActive","signature":"clearActive()","comment":"<pre> movie-service sẽ trả về trạng thái của movie này. Nếu là true, có nghĩa là vẫn có thể tạo showtime cho movie này. <\/pre>  <code>bool active = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.ActiveStateResponseOrBuilder","methods":[{"name":"getActive","signature":"getActive()","comment":"<pre> movie-service sẽ trả về trạng thái của movie này. Nếu là true, có nghĩa là vẫn có thể tạo showtime cho movie này. <\/pre>  <code>bool active = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.CheckMovieActiveStateServiceGrpc","methods":[{"name":"newStub","signature":"newStub(io.grpc.Channel)","comment":"Creates a new async stub that supports all call types for the service"},{"name":"newBlockingStub","signature":"newBlockingStub(io.grpc.Channel)","comment":"Creates a new blocking-style stub that supports unary and streaming output calls on the service"},{"name":"newFutureStub","signature":"newFutureStub(io.grpc.Channel)","comment":"Creates a new ListenableFuture-style stub that supports unary calls on the service"}]},{"name":"net.devh.boot.grpc.examples.lib.CheckMovieActiveStateServiceGrpc$CheckMovieActiveStateServiceBlockingStub","comment":"A stub to allow clients to do synchronous rpc calls to service CheckMovieActiveStateService."},{"name":"net.devh.boot.grpc.examples.lib.CheckMovieActiveStateServiceGrpc$CheckMovieActiveStateServiceFutureStub","comment":"A stub to allow clients to do ListenableFuture-style rpc calls to service CheckMovieActiveStateService."},{"name":"net.devh.boot.grpc.examples.lib.CheckMovieActiveStateServiceGrpc$CheckMovieActiveStateServiceImplBase","comment":"Base class for the server implementation of the service CheckMovieActiveStateService."},{"name":"net.devh.boot.grpc.examples.lib.CheckMovieActiveStateServiceGrpc$CheckMovieActiveStateServiceStub","comment":"A stub to allow clients to do asynchronous rpc calls to service CheckMovieActiveStateService."},{"name":"net.devh.boot.grpc.examples.lib.IdentifyRequest","comment":"Protobuf type {@code net.devh.boot.grpc.example.IdentifyRequest}","methods":[{"name":"getToken","signature":"getToken()","comment":"<code>string token = 1;<\/code>"},{"name":"getTokenBytes","signature":"getTokenBytes()","comment":"<code>string token = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyRequest$Builder","comment":"Protobuf type {@code net.devh.boot.grpc.example.IdentifyRequest}","methods":[{"name":"getToken","signature":"getToken()","comment":"<code>string token = 1;<\/code>"},{"name":"getTokenBytes","signature":"getTokenBytes()","comment":"<code>string token = 1;<\/code>"},{"name":"setToken","signature":"setToken(java.lang.String)","comment":"<code>string token = 1;<\/code>"},{"name":"clearToken","signature":"clearToken()","comment":"<code>string token = 1;<\/code>"},{"name":"setTokenBytes","signature":"setTokenBytes(com.google.protobuf.ByteString)","comment":"<code>string token = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyRequestOrBuilder","methods":[{"name":"getToken","signature":"getToken()","comment":"<code>string token = 1;<\/code>"},{"name":"getTokenBytes","signature":"getTokenBytes()","comment":"<code>string token = 1;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyResponse","comment":"Protobuf type {@code net.devh.boot.grpc.example.IdentifyResponse}","methods":[{"name":"getActive","signature":"getActive()","comment":"<code>bool active = 1;<\/code>"},{"name":"getUserId","signature":"getUserId()","comment":"<code>string userId = 2;<\/code>"},{"name":"getUserIdBytes","signature":"getUserIdBytes()","comment":"<code>string userId = 2;<\/code>"},{"name":"getRoles","signature":"getRoles()","comment":"<code>string roles = 3;<\/code>"},{"name":"getRolesBytes","signature":"getRolesBytes()","comment":"<code>string roles = 3;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyResponse$Builder","comment":"Protobuf type {@code net.devh.boot.grpc.example.IdentifyResponse}","methods":[{"name":"getActive","signature":"getActive()","comment":"<code>bool active = 1;<\/code>"},{"name":"setActive","signature":"setActive(boolean)","comment":"<code>bool active = 1;<\/code>"},{"name":"clearActive","signature":"clearActive()","comment":"<code>bool active = 1;<\/code>"},{"name":"getUserId","signature":"getUserId()","comment":"<code>string userId = 2;<\/code>"},{"name":"getUserIdBytes","signature":"getUserIdBytes()","comment":"<code>string userId = 2;<\/code>"},{"name":"setUserId","signature":"setUserId(java.lang.String)","comment":"<code>string userId = 2;<\/code>"},{"name":"clearUserId","signature":"clearUserId()","comment":"<code>string userId = 2;<\/code>"},{"name":"setUserIdBytes","signature":"setUserIdBytes(com.google.protobuf.ByteString)","comment":"<code>string userId = 2;<\/code>"},{"name":"getRoles","signature":"getRoles()","comment":"<code>string roles = 3;<\/code>"},{"name":"getRolesBytes","signature":"getRolesBytes()","comment":"<code>string roles = 3;<\/code>"},{"name":"setRoles","signature":"setRoles(java.lang.String)","comment":"<code>string roles = 3;<\/code>"},{"name":"clearRoles","signature":"clearRoles()","comment":"<code>string roles = 3;<\/code>"},{"name":"setRolesBytes","signature":"setRolesBytes(com.google.protobuf.ByteString)","comment":"<code>string roles = 3;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyResponseOrBuilder","methods":[{"name":"getActive","signature":"getActive()","comment":"<code>bool active = 1;<\/code>"},{"name":"getUserId","signature":"getUserId()","comment":"<code>string userId = 2;<\/code>"},{"name":"getUserIdBytes","signature":"getUserIdBytes()","comment":"<code>string userId = 2;<\/code>"},{"name":"getRoles","signature":"getRoles()","comment":"<code>string roles = 3;<\/code>"},{"name":"getRolesBytes","signature":"getRolesBytes()","comment":"<code>string roles = 3;<\/code>"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyServiceGrpc","methods":[{"name":"newStub","signature":"newStub(io.grpc.Channel)","comment":"Creates a new async stub that supports all call types for the service"},{"name":"newBlockingStub","signature":"newBlockingStub(io.grpc.Channel)","comment":"Creates a new blocking-style stub that supports unary and streaming output calls on the service"},{"name":"newFutureStub","signature":"newFutureStub(io.grpc.Channel)","comment":"Creates a new ListenableFuture-style stub that supports unary calls on the service"}]},{"name":"net.devh.boot.grpc.examples.lib.IdentifyServiceGrpc$IdentifyServiceBlockingStub","comment":"A stub to allow clients to do synchronous rpc calls to service IdentifyService."},{"name":"net.devh.boot.grpc.examples.lib.IdentifyServiceGrpc$IdentifyServiceFutureStub","comment":"A stub to allow clients to do ListenableFuture-style rpc calls to service IdentifyService."},{"name":"net.devh.boot.grpc.examples.lib.IdentifyServiceGrpc$IdentifyServiceImplBase","comment":"Base class for the server implementation of the service IdentifyService."},{"name":"net.devh.boot.grpc.examples.lib.IdentifyServiceGrpc$IdentifyServiceStub","comment":"A stub to allow clients to do asynchronous rpc calls to service IdentifyService."}]
