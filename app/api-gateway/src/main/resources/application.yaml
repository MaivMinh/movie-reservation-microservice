management:
  # Cấu hình dành cho phần metrics của Spring Boot Actuator. Tìm hiểu sau.
  metrics:
    distribution:
      percentiles-histogram:
        resilience4j:
          circuitbreaker:
            enabled: true
        http:
          server:
          requests:
            enabled: true

  endpoint: # Ứng với các endpoint nào thì sẽ có các yêu cầu, thiết lập tương ứng.
    health:
      show-details: always
    loggers:
      access: read_only
    beans:
      cache:
        time-to-live: 10s
  endpoints:
    web: # HTTP protocol.
      exposure: # Cấu hình các endpoint nào sẽ được expose ra ngoài.
        include: "*"  # Tất cả các endpoint sẽ được expose ra ngoài.
        exclude: "env,beans,scheduledtasks" # Loại trừ các endpoint của env, beans, scheduledtasks
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
    diskspace:
      enabled: true
    redis:
      enabled: true


spring:
  cloud:
    circuitbreaker:
      resilience4j:
        reactive:
          enabled: true
    gateway:
      routes:
        - id: api-documentation
          uri: lb://bff
          predicates:
            - Path=/api-docs/**,/v3/api-docs/**
            - Method=GET,POST,PUT,DELETE,PATCH

        - id: bff
          uri: lb://bff
          predicates:
            - Path=/**
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: default
                fallbackUri: "forward:/bff/contact-support"


  application:
    name: api-gateway
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}


server:
  port: 8888

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
      preferIpAddress: true
    register-with-eureka: true
    fetch-registry: true

grpc:
  client:
    authService:
      address: ${GRPC_SERVER_AUTH_ADDRESS:static://localhost:9091}
      negotiation-type: plaintext

# Resilience configuration
resilience4j:
  # Just like the CircuitBreaker module, this module provides an in-memory TimeLimiterRegistry which you can use to manage (create and retrieve) TimeLimiter instances.
  # Điều này có nghĩa là TimeLimiter cũng sẽ là một Resiliency Pattern trong Resilience4j.
  # Do đó, chúng ta cũng có thể sử dụng auto-configuration của Spring Boot để tự động cấu hình cho TimeLimiter.
  timelimiter:
    configs:
      default:
        timeout-duration: 5s
        cancel-running-future: false
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 6 # 6 cái request gần nhất
        permittedNumberOfCallsInHalfOpenState: 3 # Quan sát 3 request tiếp theo để tính toán failure rate.
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50